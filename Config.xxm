[[@DataLank,xxmSession]][[!var
db:TDataConnection;
qr:TQueryResult;
i,tz:integer;
s,t:string;
]][[

Context.Include('dHead.xxmi');

<<div style="position:fixed;top:0;left:0em;background-color:gold;padding:4pt;user-select:none;">
<a href="Feeds.xxm"><img src="img_l.png" width="16" height="16" border="0" alt="Back" /></a>
&nbsp;
<b>Settings</b>
&nbsp;
</div>

<div style="height:1.5em;">&nbsp;</div>>

db:=Session.Connection;
case Context['x'].AsInteger of
  0:
   begin
    qr:=TQueryResult.Create(db,'select * from "User" where id=?',[Session.UserID]);
    try
      tz:=qr.GetInt('timezone');
      <<form method="post">
      <input type="hidden" name="x" value="1" />
      <dl>
      <dt>time zone</dt>
      <dd>
      <select name="z1">>
      for i:=-14 to +12 do
      begin
        if i<0 then s:='' else s:='+';
        if i=tz div 100 then t:=' selected="1"' else t:='';
        <<option[[#t]]>>=s+Format('%.2d',[i])<</option>>
      end;
      <</select>
      :
      <select name="z2">>
      for i:=0 to 3 do
      begin
        if (i*15=tz mod 100) or (-i*15=tz mod 100) then t:=' selected="1"' else t:='';
        <<option[[#t]]>>=Format('%.2d',[i*15])<</option>>
      end;
      <</select>
      //TODO: full list, DST support
      </dd>
      <dt>default post load batch size</dt>
      [[
      if qr.IsNull('batchsize') then i:=Session.DefaultBatchSize else i:=qr.GetInt('batchsize');
      ]]
      <dd><input type="text" name="batchsize" value="[[=i]]" /></dd>
      <p><input type="submit" value=" Apply " /></p>
      </form>>
    finally
      qr.Free;
    end;
    <<p><b>previous logins:</b></p>>
    s:=Context.Cookie['feederAutoLogon'];
    qr:=TQueryResult.Create(db,'select * from "UserLogon" where user_id=? order by last desc',[Session.UserID]);
    try
      while qr.Read do
       begin
        <<div class="post">
        <div class="date">>=FormatDateTime('ddd yyyy-mm-dd hh:nn',qr.GetDate('last')+Session.TimeBias)<</div>
        [[=qr['address']]]
        "[[=qr['useragent']]]"
        [[if s=qr.GetStr('key') then begin <<img src="img_l.png" width="16" height="16" alt="current session" />> end;]]
        <a href="[[?'x',2,'id',qr['id']]]" style="color:#0000CC;">[revoke]</a>
        </div>>
       end;
    finally
      qr.Free;
    end;
    <<p><b>badge on my website:</b></p>
    <p>Copy and paste this HTML code to somewhere suitable on your homepage:</p>>

    <<textarea style="width:75vw;height:3em;" id="badge1" onmouseup="document.getElementById('badge1').select();"><iframe src="[[=PublicURL]]Badge.xxm?x=[[=Copy(Context.Cookie['feederAutoLogon'],1,12)
    ]]" style="border:1px solid black;width:100pt;height:20pt;"></iframe></textarea>>

    qr:=TQueryResult.Create(db,'select sqlite_version()',[]);
    try
      <<p title="sqlite_version">>=qr[0]<</p>>
    finally 
      qr.Free;
    end;

   end;
  1://update
   begin
    db.BeginTrans;
    try
      tz:=Context['z1'].AsInteger;
      i:=Context['batchsize'].AsInteger;
      if tz<0 then tz:=tz*100-Context['z2'].AsInteger else tz:=tz*100+Context['z2'].AsInteger;
      db.Execute('update "User" set timezone=?, batchsize=? where id=?',
        [tz
        ,i
        ,Session.UserID
        ]);
      Session.TimeBias:=(tz div 100)/24.0+(tz mod 100)/1440.0;
      Session.DefaultBatchSize:=i;
      db.CommitTrans;
    except
      db.RollbackTrans;
      raise;
    end;
    <<p>Settings updated</p>
    <p><a href="Feeds.xxm">back</a></p>>
   end;
  2://revoke
   begin
    db.BeginTrans;
    try
      db.Execute('delete from "UserLogon" where user_id=? and id=?',[Session.UserID,Context['id'].AsInteger]);
      db.CommitTrans;
    except
      db.RollbackTrans;
      raise;
    end;
    //TODO: kill live sessions
    <<p>Auto-logon revoked</p>
    <p><a href="?">Continue...</a></p>>
   end;
  //3:
  else raise Exception.Create('Unknown action');
end;

Context.Include('dFoot.xxmi');
